// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: testdemo.proto

package testdemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestdemoClient is the client API for Testdemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestdemoClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error)
	EditTag(ctx context.Context, in *EditTagReq, opts ...grpc.CallOption) (*EditTagRes, error)
	GetTagDetail(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagRes, error)
	DelTag(ctx context.Context, in *DelTagReq, opts ...grpc.CallOption) (*DelTagRes, error)
	GetTagList(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagRes, error)
}

type testdemoClient struct {
	cc grpc.ClientConnInterface
}

func NewTestdemoClient(cc grpc.ClientConnInterface) TestdemoClient {
	return &testdemoClient{cc}
}

func (c *testdemoClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error) {
	out := new(PingRes)
	err := c.cc.Invoke(ctx, "/testdemo.Testdemo/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testdemoClient) EditTag(ctx context.Context, in *EditTagReq, opts ...grpc.CallOption) (*EditTagRes, error) {
	out := new(EditTagRes)
	err := c.cc.Invoke(ctx, "/testdemo.Testdemo/EditTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testdemoClient) GetTagDetail(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagRes, error) {
	out := new(GetTagRes)
	err := c.cc.Invoke(ctx, "/testdemo.Testdemo/GetTagDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testdemoClient) DelTag(ctx context.Context, in *DelTagReq, opts ...grpc.CallOption) (*DelTagRes, error) {
	out := new(DelTagRes)
	err := c.cc.Invoke(ctx, "/testdemo.Testdemo/DelTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testdemoClient) GetTagList(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagRes, error) {
	out := new(GetTagRes)
	err := c.cc.Invoke(ctx, "/testdemo.Testdemo/GetTagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestdemoServer is the server API for Testdemo service.
// All implementations must embed UnimplementedTestdemoServer
// for forward compatibility
type TestdemoServer interface {
	Ping(context.Context, *PingReq) (*PingRes, error)
	EditTag(context.Context, *EditTagReq) (*EditTagRes, error)
	GetTagDetail(context.Context, *GetTagReq) (*GetTagRes, error)
	DelTag(context.Context, *DelTagReq) (*DelTagRes, error)
	GetTagList(context.Context, *GetTagReq) (*GetTagRes, error)
	mustEmbedUnimplementedTestdemoServer()
}

// UnimplementedTestdemoServer must be embedded to have forward compatible implementations.
type UnimplementedTestdemoServer struct {
}

func (UnimplementedTestdemoServer) Ping(context.Context, *PingReq) (*PingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTestdemoServer) EditTag(context.Context, *EditTagReq) (*EditTagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTag not implemented")
}
func (UnimplementedTestdemoServer) GetTagDetail(context.Context, *GetTagReq) (*GetTagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagDetail not implemented")
}
func (UnimplementedTestdemoServer) DelTag(context.Context, *DelTagReq) (*DelTagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTag not implemented")
}
func (UnimplementedTestdemoServer) GetTagList(context.Context, *GetTagReq) (*GetTagRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagList not implemented")
}
func (UnimplementedTestdemoServer) mustEmbedUnimplementedTestdemoServer() {}

// UnsafeTestdemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestdemoServer will
// result in compilation errors.
type UnsafeTestdemoServer interface {
	mustEmbedUnimplementedTestdemoServer()
}

func RegisterTestdemoServer(s grpc.ServiceRegistrar, srv TestdemoServer) {
	s.RegisterService(&Testdemo_ServiceDesc, srv)
}

func _Testdemo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestdemoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdemo.Testdemo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestdemoServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testdemo_EditTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestdemoServer).EditTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdemo.Testdemo/EditTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestdemoServer).EditTag(ctx, req.(*EditTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testdemo_GetTagDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestdemoServer).GetTagDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdemo.Testdemo/GetTagDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestdemoServer).GetTagDetail(ctx, req.(*GetTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testdemo_DelTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestdemoServer).DelTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdemo.Testdemo/DelTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestdemoServer).DelTag(ctx, req.(*DelTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testdemo_GetTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestdemoServer).GetTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdemo.Testdemo/GetTagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestdemoServer).GetTagList(ctx, req.(*GetTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Testdemo_ServiceDesc is the grpc.ServiceDesc for Testdemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Testdemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testdemo.Testdemo",
	HandlerType: (*TestdemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Testdemo_Ping_Handler,
		},
		{
			MethodName: "EditTag",
			Handler:    _Testdemo_EditTag_Handler,
		},
		{
			MethodName: "GetTagDetail",
			Handler:    _Testdemo_GetTagDetail_Handler,
		},
		{
			MethodName: "DelTag",
			Handler:    _Testdemo_DelTag_Handler,
		},
		{
			MethodName: "GetTagList",
			Handler:    _Testdemo_GetTagList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdemo.proto",
}
